
call pathogen#infect()

let mapleader = ","

set nocompatible
syntax enable
set encoding=utf-8
set mouse=a
set hidden
filetype plugin indent on

" set shortmess=atI

set expandtab
set shiftwidth=2
set softtabstop=2

set autoindent
set laststatus=2
set showmatch
set incsearch
set hlsearch

set history=1000

set autoread                    "Reload files changed outside vim

set nu " show numbers

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

set winwidth=96
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=5
set winminheight=5
set winheight=999

set switchbuf=useopen,split

set scrolloff=4

"set ruler

set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

if $VIM_CRONTAB == "true"
  set nobackup
  set nowritebackup
endif

set wildmode=longest,list
set wildmenu

set showcmd

:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)


set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/cache
set wildignore+=*.png,*.jpg,*.gif


set listchars=tab:>-,trail:Â· ",eol:$





" http://items.sjbach.com/319/configuring-vim-right
runtime macros/matchit.vim



if has("autocmd")
  " Remove trailing whitespace on save
  autocmd BufWritePre * :%s/\s\+$//e

  " Source the vimrc file after saving it
  " autocmd bufwritepost .vimrc source $MYVIMRC

  autocmd BufNewFile,BufRead Gemfile,Rakefile,Guardfile,Capfile,config.ru setlocal filetype=ruby
  autocmd FileType rb set makeprg=rake
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set t_Co=256 " 256 colors
:set background=dark
" :color Tomorrow-Night-Eighties
" :color grb256



set cursorline
hi cursorline cterm=bold ctermbg=233
hi LineNr ctermfg=238




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <space> zz

map <leader>y "*y
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" tab navigation like firefox
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" nnoremap <c-s-l> :tabnext<cr>
" nnoremap <c-s-h> :tabprevious<cr>



" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>
" Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

nmap <silent> <leader>/ :nohlsearch<CR>
nnoremap <leader><leader> <c-^>

map ,= mzgg=G`z

nmap <silent> <leader>r mzggVG!xmpfilter -a<cr>'z



" Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%


" Command-T mappings

"let g:CommandTMatchWindowAtTop=1


" Open files with <leader>h
map <leader>h :CommandT<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
" Open files, limited to the directory of the current file, with <leader>gf
" This requires the %% mapping found below.
map <leader>nf :CommandTFlush<cr>\|:CommandT %%<cr>
map <leader>nb :CommandTFlush<cr>\|:CommandTBuffer<cr>

map <leader>nad :CommandT app/admin<cr>
map <leader>nas :CommandT app/assets<cr>
map <leader>nv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>nc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>nm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>nh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>nj :CommandTFlush<cr>\|:CommandT app/assets/javascripts<cr>
map <leader>nl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>np :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>ns :CommandTFlush<cr>\|:CommandT spec<cr>


map <leader>gg :topleft 100 :split Gemfile<cr>
map <leader>gr :topleft :split config/routes.rb<cr>

" Rake Routes

function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . _ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>





""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SWITCH BETWEEN TEST AND PRODUCTION CODE
" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"

function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 ||
        \ match(current_file, '\<models\>') != -1 ||
        \ match(current_file, '\<views\>') != -1 ||
        \ match(current_file, '\<helpers\>') != -1 ||
        \ match(current_file, '\<decorators\>') != -1 ||
        \ match(current_file, '\<presenters\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>







""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>
map <leader>w :w\|:!script/features --profile wip<cr>

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>



" Copy the entire contents of the current file to the system clipboard
" This is useful for folks that do not have vim compiled with X bindings
" to use the " register
function! CopyFileToClipboard()
  :!cat %|pbcopy
endfunction
:command! CopyFile :call CopyFileToClipboard()

