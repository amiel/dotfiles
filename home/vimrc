" " Bundle: tpope/vim-rsi
" " Bundle: tpope/vim-rails
" " Bundle: tpope/vim-fugitive
" " Bundle: jgdavey/vim-blockle
" " Bundle: commentary.vim
" " Bundle: tpope/vim-repeat
" " Bundle: t9md/vim-ruby-xmpfilter
" " Bundle: tpope/vim-surround
" " Bundle: vroom

" " Bundle: jtratner/vim-flavored-markdown



" " Bundle: tpope/vim-tbone
" " Bundle: lunaru/vim-less
" " Bundle: ember.vim
" " Bundle: terryma/vim-multiple-cursors
" " Bunlde: vim-preview
" " Bundle: jlanzarotta/bufexplorer
" " Bundle: tpope/vim-dispatch
" " Bundle: rizzatti/funcoo.vim
" " Bundle: rizzatti/dash.vim
" " Bundle: ngmy/vim-rubocop


call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'wincent/Command-T', { 'do': '( eval \"$(rbenv init -)\"; export RBENV_VERSION=2.1.0; pwd; rbenv rehash; ruby --version; rake make )' }
Plug 'amiel/vim-tmux-navigator'
Plug 'bling/vim-airline'
Plug 'rking/ag.vim'
Plug 'osyo-manga/vim-over'

Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-abolish'

Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'scrooloose/syntastic'

Plug 'tpope/vim-rsi'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-fugitive'
Plug 'jgdavey/vim-blockle'
Plug 'commentary.vim'
Plug 'nono/vim-handlebars'

Plug 'mattn/emmet-vim'

Plug 'wakatime/vim-wakatime'

call plug#end()


let mapleader = ","

set exrc
set secure


set nocompatible
syntax enable
set encoding=utf-8
set mouse=a
" Keep open files hidden (doesn't require you to save files to switch away from them)
set hidden
filetype plugin indent on

set nomodeline

" set shortmess=atI

set nrformats=hex,alpha

set expandtab
set shiftwidth=2
set softtabstop=2

set wrap
set textwidth=79
set formatoptions=qcron1
set colorcolumn=96

" performance
set synmaxcol=128
set ttyfast " u got a fast terminal
set ttyscroll=3
set lazyredraw " to avoid scrolling problems

set cursorline

set hlsearch

set number
set relativenumber

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set noequalalways

set winheight=7 winminheight=7
set winwidth=13 winminwidth=13
set winheight=50 winwidth=96


set scrolloff=4

set switchbuf=useopen

set autoread

" set ruler

" keep undo information even after we quit
set undofile

set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set undodir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*

set wildmode=longest,list
set wildmenu



set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=.git
set wildignore+=tmp/cache
set wildignore+=.tmp
set wildignore+=*.png,*.jpg,*.gif,*.db
set wildignore+=coverage/**
set wildignore+=node_modules/*,bower_components/*

set list


" http://items.sjbach.com/319/configuring-vim-right
" extends % to match more things correctly
runtime macros/matchit.vim

""""""""""""""""
" Abbreviations
""""""""""""""""

abbr pry require 'pry'; binding.pry

""""""""""""
" Syntastic
""""""""""""
let g:syntastic_html_tidy_ignore_errors = ['trimming empty']
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_filetype_map = { 'handlebars.html': 'handlebars' }


""""""""""""""
" Airline
""""""""""""""


" set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

set ttimeoutlen=50
let g:airline_powerline_fonts = 1
" let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline_theme = 'custom'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set t_Co=256 " 256 colors
:set background=dark
" :color Tomorrow-Night-Eighties
" :color grb256

highlight ColorColumn term=NONE ctermbg=233 ctermfg=NONE guibg=NONE
" highlight cursorline cterm=NONE ctermbg=234 term=NONE guibg=NONE
highlight cursorline cterm=bold ctermbg=NONE term=NONE guibg=NONE
highlight LineNr ctermfg=239
highlight SpecialKey term=NONE ctermfg=238 guifg=NONE
highlight SignColumn ctermbg=NONE guibg=NONE
highlight NonText ctermfg=black

highlight DiffAdd term=reverse cterm=bold ctermbg=green ctermfg=white
highlight DiffChange term=reverse cterm=bold ctermbg=cyan ctermfg=black
highlight DiffText term=reverse cterm=bold ctermbg=gray ctermfg=black
highlight DiffDelete term=reverse cterm=bold ctermbg=red ctermfg=black

highlight VertSplit term=NONE cterm=NONE ctermbg=238 ctermfg=238

highlight TabLineFill term=NONE cterm=NONE ctermbg=235 ctermfg=249
highlight TabLine term=NONE cterm=NONE ctermbg=235 ctermfg=249
highlight TabLineSel term=NONE cterm=NONE ctermbg=235 ctermfg=150

highlight Title term=NONE cterm=NONE ctermbg=235 ctermfg=238

" from something else...
" highlight! link DiffText MatchParen




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" center cursor position in screen
nmap <space> zz

map <leader>a =ip

" apply macros easily with Q
nnoremap Q @q
vnoremap Q :norm @q<cr>

set pastetoggle=<leader>z

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" rotate windows
nnoremap <c-w><c-o> <c-w>r

nnoremap <c-s> <c-w>j<c-w>=
" nnoremap <c-+> <c-w>+
" nnoremap <c--> <c-w>-

" shift l/h to switch tabs
noremap <S-l> gt
noremap <S-h> gT


" New vertical split, switch to it
nnoremap <leader>w <C-w>v<C-w>l
" New horiz split, switch to it
nnoremap <leader>s <C-w>s<C-w>j

" tab navigation like firefox
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" CTRL+A moves to start of line in command mode
cnoremap <C-a> <home>
" CTRL+E moves to end of line in command mode
cnoremap <C-e> <end>

" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>
" Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

nmap <silent> <leader>/ :nohlsearch<CR>
nnoremap <leader><leader> <c-^>

" Use real regexes for searches
nnoremap / /\v
vnoremap / /\v

map <leader>= mzgg=G`z



" Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>E :Explore<cr>
map <leader>v :view %%


" nmap <silent> <leader>r mzggVG!xmpfilter -a<cr>'z
nmap <buffer> <lender>r   <Plug>(xmpfilter-run)

" nmap <buffer> <F5> <Plug>(xmpfilter-run)
" xmap <buffer> <F5> <Plug>(xmpfilter-run)
" imap <buffer> <F5> <Plug>(xmpfilter-run)

" nmap <buffer> <F6> <Plug>(xmpfilter-mark)
" xmap <buffer> <F6> <Plug>(xmpfilter-mark)
" imap <buffer> <F6> <Plug>(xmpfilter-mark)

nnoremap <leader>. :A<cr>




" Command-T mappings

"let g:CommandTMatchWindowAtTop=1

let g:CommandTWildIgnore=&wildignore . ",tmp/*,dist/*"


" Open files with <leader>h
map <leader>h :CommandT<cr>

" Open files, limited to the directory of the current file
" This requires the %% mapping found below.
map <leader>nh :CommandTFlush<cr>\|:CommandT %%<cr>
map <leader>ne :CommandTFlush<cr>\|:CommandT %%<cr>

map <leader>nt :CommandTFlush<cr>\|:CommandTBuffer<cr>
map <leader>nb :CommandTFlush<cr>\|:CommandTBuffer<cr>

map <leader>nad :CommandT app/admin<cr>
map <leader>nas :CommandT app/assets<cr>
map <leader>nv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>nc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>nm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>nj :CommandTFlush<cr>\|:CommandT app/assets/javascripts<cr>
map <leader>nl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>np :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>ns :CommandTFlush<cr>\|:CommandT spec<cr>


map <leader>gg :topleft 100 :split Gemfile<cr>
map <leader>gr :topleft :split config/routes.rb<cr>

map <leader>gR :call ShowRoutes()<cr>

" Rake Routes

function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  " :exec ":normal " . line("$") . _ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction




if has("autocmd")
  " Remove trailing whitespace on save
  autocmd BufWritePre * :%s/\s\+$//e

  " Source the vimrc file after saving it
  autocmd bufwritepost .vimrc source $MYVIMRC

  set runtimepath+=/usr/local/share/lilypond/2.16.2/vim/

  augroup windows
    autocmd!
    autocmd VimResized * :wincmd = " resize splits when the window is resized
  augroup END

endif







""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUNNING TESTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>t :VroomRunTestFile<cr>
map <leader>T :VroomRunNearestTest<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-n>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
function! PromoteToLet()
  :normal! dd
  :normal! P
  :.s/\(@\)\?\(\w\+\) \(||\)\?= \(.*\)$/let(:\2) { \4 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

""""""""""""""""""""""""""""""""""""""
" Update to new rspec expect() syntax
function! UpdateRspec()
  :s/\.should ==/.should eq/e
  :s/\v([-a-zA-Z0-9\(\)\._]+)\.should/expect(\1).to/
endfunction
:map <leader>P :call UpdateRspec()<cr>

":nmap <leader>gh :s/\v( |\{):(\w+)\=\>/\1\r\2: /g<cr>
" :nmap <leader>gc :%s/\v:(\w+) \=\>/\1:/g<cr>
:nmap <leader>gc :s/\v:(\w+) \=\>/\1:/g<cr>


" Copy the entire contents of the current file to the system clipboard
" This is useful for folks that do not have vim compiled with X bindings
" to use the " register
function! CopyFileToClipboard()
  :!cat %|pbcopy
endfunction
:command! CopyFile :call CopyFileToClipboard()

function! MakeDirectoryForCurrentFile()
  :!mkdir -p -v %:h
endfunction
:command! Mkdir :call MakeDirectoryForCurrentFile()

command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
