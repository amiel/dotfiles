call plug#begin('~/.vim/plugged')

if !has('nvim')
  Plug 'tpope/vim-sensible'
end

" Plug 'wincent/Command-T', { 'do': '( eval \"$(rbenv init -)\"; export RBENV_VERSION=2.4.0; pwd; rbenv rehash; ruby --version; rake make )' }

" Plug 'junegunn/fzf', { 'dir': '~/.fzf' }
" Plug 'junegunn/fzf.vim'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-vinegar' " netrw improvements

Plug 'chriskempson/base16-vim'

Plug 'amiel/vim-tmux-navigator'
Plug 'bling/vim-airline'
Plug 'osyo-manga/vim-over' " Show :%s/ changes in realtime, especially with :OverCommandLine
Plug 'sjl/gundo.vim' " Or try mbbill/undotree

Plug 'TamaMcGlinn/quickfixdd'

Plug 'tpope/vim-rsi' " Readline keybindings
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-abolish' " %Subvert/...
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch' " :Move, :Delete, etc

Plug 'ap/vim-css-color'

" Plug 'ervandew/supertab'
" Plug 'cohama/lexima.vim'

if has('nvim')
  Plug 'neovim/nvim-lspconfig'

  " Plug 'hrsh7th/nvim-compe'
  Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
  Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}
end

Plug 'tpope/vim-bundler'
Plug 'tpope/vim-projectionist'

" Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
" Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }
"
" Plug 'elixir-lang/vim-elixir'
" Plug 'mhinz/vim-mix-format'
" Plug 'slashmili/alchemist.vim'

" Plug 'matze/vim-lilypond'
" Plug 'dart-lang/dart-vim-plugin'


" JSON MAPPINGS: TODO LEARN
Plug 'tpope/vim-jdaddy'

" Plug 'w0rp/ale'

Plug 'tpope/vim-rake'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-db'

Plug 'tpope/vim-fugitive' " git support
Plug 'jgdavey/vim-blockle' " <leader>b to switch ruby block style
Plug 'tpope/vim-commentary'
" Plug 'nono/vim-handlebars'

Plug 'mattn/emmet-vim'

" Experimental
Plug 'mhinz/vim-startify'
Plug 'ryanoasis/vim-devicons'
Plug 'djoshea/vim-autoread'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'roxma/vim-tmux-clipboard'
Plug 'tmux-plugins/vim-tmux'

Plug 'sukima/vim-javascript-imports'
" Plug 'sukima/vim-ember-imports'

Plug 'coot/CRDispatcher'
Plug 'coot/EnchantedVim'

" To look in to:
" * https://github.com/machakann/vim-sandwich
" * https://github.com/rhysd/clever-f.vim
" * http://bytefluent.com/vivify/
" * https://www.reddit.com/r/vimplugins/comments/52v9dp/musthave_plugins/
" Chiel92/vim-autoformat
" https://github.com/Raimondi/delimitMate

" " Bundle: vroom
" " Bundle: tpope/vim-tbone
" " Bundle: ember.vim
" " Bundle: terryma/vim-multiple-cursors
" " Bundle: rizzatti/funcoo.vim

Plug 'sheerun/vim-polyglot'

call plug#end()


let mapleader = ","

set exrc
set secure

set nocompatible
syntax enable
set encoding=utf-8
set mouse=a
" Keep open files hidden (doesn't require you to save files to switch away from them)
set hidden
filetype plugin indent on

set nomodeline

" set shortmess=atI

set nrformats=hex,alpha

set expandtab
set shiftwidth=2
set softtabstop=2

set wrap
set textwidth=79
set formatoptions=qcron1
set colorcolumn=96
set nojoinspaces

" performance
set synmaxcol=256

if !has('nvim')
  set ttyfast " u got a fast terminal
  set ttyscroll=3
end

set lazyredraw " to avoid scrolling problems

" Avoid command-line redraw on every entered character by turning off
" Arabic shaping (which is implemented poorly).
" found here: https://groups.google.com/forum/#!topic/vim_dev/QOWQo7DKG0M
if has('arabic')
  set noarabicshape
endif

set cursorline
set signcolumn=number

set hlsearch

set number
au FileType fzf set nonu nornu


" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set noequalalways

" set winheight=15 " winminheight=7
set winwidth=13 winminwidth=13
" set winheight=50 winwidth=96

set cmdheight=3

set scrolloff=4

set switchbuf=useopen

set autoread

" set ruler

" keep undo information even after we quit
set undofile

set noswapfile

set backupcopy=yes
set backupdir=~/.vim-tmp//,~/.tmp//,~/tmp//,/var/tmp//,/tmp//
set directory=~/.vim-tmp//,~/.tmp//,~/tmp//,/var/tmp//,/tmp//
set undodir=~/.vim-tmp//,~/.tmp//,~/tmp//,/var/tmp//,/tmp//
set backupskip=/tmp/*,/private/tmp/*

set wildmode=longest:full,list
set wildmenu



set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=.git
set wildignore+=tmp/cache
set wildignore+=.tmp
set wildignore+=*.png,*.jpg,*.gif,*.db
set wildignore+=coverage/**
set wildignore+=node_modules/**
set wildignore+=bower_components/**

set list

let g:mix_format_on_save = 1

" http://items.sjbach.com/319/configuring-vim-right
" extends % to match more things correctly
runtime macros/matchit.vim

""""""""""""""""
" Abbreviations
""""""""""""""""

abbr rpry require 'pry'; binding.pry

if has("nvim")
  let g:loaded_python_provider = 1 " Disable python2 support
  " let g:python_host_prog = '/usr/local/bin/python'
  let g:python3_host_prog = '/usr/local/bin/python3'
  let g:gundo_prefer_python3 = v:true
end


"""""""""""
" Startify
"""""""""""

let g:startify_list_order = [
      \ ['   Sessions'],
      \ 'sessions',
      \ ['   Bookmarks'],
      \ 'bookmarks',
      \ ['   My most recently used files in the current directory'],
      \ 'dir',
      \ ['   Commands'],
      \ 'commands',
      \ ]

let g:startify_change_to_vcs_root = 1
let g:startify_bookmarks = [ {'c': '~/.vimrc'} ]

let g:startify_commands = [
    \ ['Vim Reference', 'h ref'],
    \ ]

""""""""""""""
" Airline
""""""""""""""

" set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

set ttimeoutlen=50
let g:airline_powerline_fonts = 1
let g:webdevicons_enable_airline_statusline = 1

" let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#hunks#non_zero_only = 1
" let g:airline#extensions#ale#enabled = 1
" let g:airline#extensions#ale#error_symbol = '✗'
" let g:airline#extensions#ale#warning_symbol = '⚠'
let g:airline_theme = 'custom'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set t_Co=256 " 256 colors
:set background=dark
" :color Tomorrow-Night-Eighties
" :color gotham256

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" let base16colorspace=256
" colorscheme base16-default-dark

" highlight ColorColumn term=NONE ctermbg=233 ctermfg=NONE guibg=NONE
" highlight cursorline cterm=NONE ctermbg=234 term=NONE guibg=NONE
" highlight cursorline cterm=bold ctermbg=NONE term=NONE guibg=NONE
" highlight LineNr ctermfg=239
" highlight SpecialKey term=NONE ctermfg=238 guifg=NONE
" highlight SignColumn ctermbg=NONE guibg=NONE
" highlight NonText ctermfg=black

" highlight DiffAdd ctermbg=194 ctermbg=235
" highlight DiffChange ctermfg=157 ctermbg=235
" highlight DiffText cterm=bold ctermfg=120 ctermbg=234
" highlight DiffDelete ctermfg=52 ctermbg=232

" highlight VertSplit term=NONE cterm=NONE ctermbg=238 ctermfg=238

" highlight TabLineFill term=NONE cterm=NONE ctermbg=235 ctermfg=249
" highlight TabLine term=NONE cterm=NONE ctermbg=235 ctermfg=249
" highlight TabLineSel term=NONE cterm=NONE ctermbg=235 ctermfg=150

" highlight ALEWarning cterm=bold ctermfg=226
" highlight ALEError cterm=bold ctermbg=52
" highlight ALEErrorSign cterm=bold ctermfg=124
" highlight link ALEWarningSign  ALEWarning

" highlight CocWarningVirtualText term=NONE ctermfg=166 ctermbg=236
" highlight CocInfoVirtualText ctermfg=166 ctermbg=236

" CocErrorVirtualText xxx links to CocErrorSign
" CocWarningVirtualText xxx links to CocWarningSign
" CocInfoVirtualText xxx links to CocInfoSign
" CocHintVirtualText xxx links to CocHintSign




" highlight Title term=NONE cterm=NONE ctermbg=235 ctermfg=238

" from something else...
" highlight! link DiffText MatchParen




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" center cursor position in screen
nmap <space> zz

map <leader>a =ip

" apply macros easily with Q
nnoremap Q @q
vnoremap Q :norm @q<cr>

set pastetoggle=<leader>v

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

if has('nvim')
  tnoremap <c-j> <c-\><c-n><c-w>j
  tnoremap <c-k> <c-\><c-n><c-w>k
  tnoremap <c-h> <c-\><c-n><c-w>h
  tnoremap <c-l> <c-\><c-n><c-w>l
endif

" rotate windows
nnoremap <c-w><c-o> <c-w>r

nnoremap <c-s> <c-w>j<c-w>=
" nnoremap <c-+> <c-w>+
" nnoremap <c--> <c-w>-

" shift l/h to switch tabs
noremap <S-l> gt
noremap <S-h> gT


" New vertical split, switch to it
nnoremap <leader>w <C-w>v<C-w>l
" New horiz split, switch to it
nnoremap <leader>s <C-w>s<C-w>j

" tab navigation like firefox
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" CTRL+A moves to start of line in command mode
" cnoremap <C-a> <home>
" CTRL+E moves to end of line in command mode
" cnoremap <C-e> <end>

" Insert a hash rocket with <c-l>
" imap <c-l> <space>=><space>
" Can't be bothered to understand ESC vs <c-c> in insert mode
imap <c-c> <esc>

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

nmap <silent> <leader>/ :nohlsearch<CR>
nnoremap <leader><leader> <c-^>

" Use real regexes for searches
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v

let g:VeryMagic = 0
let g:VeryMagicSubstitute = 1


map <leader>= mzgg=G`z



" Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

"
cnoremap ## <C-R>=expand('%:tr')<cr>

" map <leader>e :edit %%
map <leader>E :Explore<cr>

nnoremap <leader>. :A<cr>
" :Glcd<cr>

" fzf mappings

map <leader>h :Files<cr>
map <leader>nh :GFiles?<cr>
map <leader>nb :Buffers<cr>
" map <leader>e :Files %%<cr>
map <leader>ne :Files %%<cr>

if has("autocmd")
  " Remove trailing whitespace on save
  autocmd BufWritePre * :%s/\s\+$//e

  " Source the vimrc file after saving it
  " autocmd bufwritepost .vimrc source $MYVIMRC

  " set runtimepath+=/usr/local/share/lilypond/2.16.2/vim/

  augroup windows
    autocmd!
    autocmd VimResized * :wincmd = " resize splits when the window is resized
  augroup END
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
function! PromoteToLet()
  :normal! dd
  :normal! P
  :.s/\(@\)\?\(\w\+\) \(||\)\?= \(.*\)$/let(:\2) { \4 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO function
function! PromoteToFunction()
  :normal! dd
  :normal! P
  :.s/\(@\)\?\(\w\+\) \(||\)\?= \(.*\)$/def \2\r\4\rend\r/
  :normal ={
endfunction
:command! PromoteToFunction :call PromoteToFunction()
:map <leader>f :PromoteToFunction<cr>


""""""""""""""""""""""""""""""""""""""
" Update to new rspec expect() syntax
function! UpdateRspec()
  :s/\.should ==/.should eq/e
  :s/\v([-a-zA-Z0-9\(\)\._]+)\.should/expect(\1).to/
endfunction
:map <leader>P :call UpdateRspec()<cr>

":nmap <leader>gh :s/\v( |\{):(\w+)\=\>/\1\r\2: /g<cr>
" :nmap <leader>gc :%s/\v:(\w+) \=\>/\1:/g<cr>
:nmap <leader>gc :s/\v:(\w+) ?\=\> ?/\1: /g<cr>


" Copy the entire contents of the current file to the system clipboard
" This is useful for folks that do not have vim compiled with X bindings
" to use the " register
function! CopyFileToClipboard()
  :!cat %|pbcopy
endfunction
:command! CopyFile :call CopyFileToClipboard()

function! MakeDirectoryForCurrentFile()
  :!mkdir -p -v %:h
endfunction
:command! Mkdir :call MakeDirectoryForCurrentFile()

" TODO: Comment what the hell this does
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
